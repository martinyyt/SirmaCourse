package com.sirma.javacourse.intro;

import org.junit.Assert;
import org.junit.Test;

import java.util.Arrays;

public class ArraySortingTest {

    @Test
    public void testsQuickSort_LargeArrays() {
        int[] array = new int[]{5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 1648646, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, -5898647, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1, 5, 9, 33, 47, 9, -5, 8, -63, 546, 8, 2, 1, -1, 65848, -38489,
                2, 8, 6, 3, 4, -52894, 9, -0, 99, -1568, 1};
        int[] expectedArray = new int[array.length];
        for (int i = 0; i < expectedArray.length; i++) {
            expectedArray[i] = array[i];
        }
        System.out.println("array holds: " + array.length + " elements");
        Arrays.sort(expectedArray);
        ArraySorting.quickSort(array);
        for (int i = 0; i < array.length; i++) {
            Assert.assertEquals(expectedArray[i], array[i]);
        }
    }

    @Test
    public void testsQuickSort_Nulls() {
        int[] array = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        int[] expectedArray = new int[array.length];
        for (int i = 0; i < expectedArray.length; i++) {
            expectedArray[i] = array[i];
        }
        System.out.println("array holds: " + array.length + " elements");
        Arrays.sort(expectedArray);
        ArraySorting.quickSort(array);
        for (int i = 0; i < array.length; i++) {
            Assert.assertEquals(expectedArray[i], array[i]);
        }
    }

}